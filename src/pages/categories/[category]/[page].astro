---
import type { GetStaticPaths } from "astro";
import { SITE } from "@/lib/config";
import { articlesHandler } from "@/lib/handlers/articles";
import { categoriesHandler } from "@/lib/handlers/categories";
import ListLayout from "@/layouts/list.astro";

import Pagination from "@/components/shared/pagination.astro";
import WideCard from "@/components/cards/wideCard.astro";
import { getEntry } from "astro:content";

export const getStaticPaths = (async ({ paginate }) => {
  const allCategories = categoriesHandler.allCategories();
  const allArticles = articlesHandler.allArticles();

  return allCategories.flatMap((category) => {
    const filteredArticles = allArticles.filter(
      (article) => article.data.category.id === category.id
    );
    return paginate(filteredArticles, {
      params: { category: category.id },
      props: { postsLength: filteredArticles.length },
      pageSize: SITE.postsPerPage,
    });
  });
}) satisfies GetStaticPaths;

const { page } = Astro.props;
const { postsLength } = Astro.props;
const params = Astro.params;
const articles = page.data;
const pathname = new URL(Astro.request.url).pathname.split("/");
const basePath = `${pathname[1]}/${pathname[2]}`;

const entry = await getEntry("views", "categories");

if (!entry) {
  return Astro.redirect("/404");
}
---

<ListLayout header={params.category} entry={entry}>
  <ul class="flex flex-col gap-2 flex-1">
    {
      articles.map((article) => (
        <WideCard
          article={article}
          isLast={articles.lastIndexOf(article) === articles.length - 1}
        />
      ))
    }
  </ul>
  {
    postsLength > SITE.postsPerPage ? (
      <Pagination
        length={page.lastPage}
        currentUrl={page.url.current}
        currentPage={page.currentPage}
        baseUrl={`/${basePath}`}
        prevUrl={page.url.prev}
        nextUrl={page.url.next}
        lastUrl={`/${basePath}/${page.lastPage}`}
      />
    ) : null
  }
</ListLayout>
